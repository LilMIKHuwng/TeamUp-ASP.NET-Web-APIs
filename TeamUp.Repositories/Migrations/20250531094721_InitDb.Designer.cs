// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamUp.Repositories.Context;

#nullable disable

namespace TeamUp.Repositories.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250531094721_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 459, DateTimeKind.Unspecified).AddTicks(8418), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Quản trị viên",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 459, DateTimeKind.Unspecified).AddTicks(8441), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 459, DateTimeKind.Unspecified).AddTicks(8456), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Người dùng thông thường",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 459, DateTimeKind.Unspecified).AddTicks(8458), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 459, DateTimeKind.Unspecified).AddTicks(8461), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Chủ sân thể thao",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 459, DateTimeKind.Unspecified).AddTicks(8462), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 459, DateTimeKind.Unspecified).AddTicks(8466), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Coach / Trainer",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 459, DateTimeKind.Unspecified).AddTicks(8467), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Coach",
                            NormalizedName = "COACH"
                        });
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.CoachBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<int>("CourtId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsNotified")
                        .HasColumnType("bit");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("CourtId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("VoucherId");

                    b.ToTable("CoachBookings");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Court", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SportsComplexId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SportsComplexId");

                    b.ToTable("Courts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6382), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân cỏ nhân tạo tiêu chuẩn",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6382), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân 5 người A",
                            PricePerHour = 10000m,
                            SportsComplexId = 1,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6392), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân chất lượng cao, đèn chiếu sáng ban đêm",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6392), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân 7 người B",
                            PricePerHour = 350000m,
                            SportsComplexId = 1,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6395), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân trong nhà, chuẩn thi đấu",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6396), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân cầu lông A",
                            PricePerHour = 150000m,
                            SportsComplexId = 2,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6399), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân chuẩn phong trào",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6399), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân cầu lông B",
                            PricePerHour = 100000m,
                            SportsComplexId = 2,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6402), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân ngoài trời, chất lượng cao",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6403), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân Pickleball A",
                            PricePerHour = 250000m,
                            SportsComplexId = 3,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6405), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân trong nhà, có mái che",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6406), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân Pickleball B",
                            PricePerHour = 300000m,
                            SportsComplexId = 3,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6408), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân chuẩn FIBA, sàn gỗ cao cấp",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6409), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân Pickleball C",
                            PricePerHour = 400000m,
                            SportsComplexId = 4,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6411), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân phong trào, phù hợp nhóm bạn",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6412), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân Pickleball D",
                            PricePerHour = 250000m,
                            SportsComplexId = 4,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6414), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân luyện tập cá nhân",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6415), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân Pickleball E",
                            PricePerHour = 200000m,
                            SportsComplexId = 4,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6417), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân trong nhà, chuẩn thi đấu",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6417), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân cầu lông C",
                            PricePerHour = 300000m,
                            SportsComplexId = 5,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6419), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân ngoài trời, thoáng mát",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6420), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân cầu lông D",
                            PricePerHour = 200000m,
                            SportsComplexId = 5,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 12,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6422), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân thi đấu chuyên nghiệp",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6423), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân cầu lông E",
                            PricePerHour = 350000m,
                            SportsComplexId = 5,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 13,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6427), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân tiêu chuẩn quốc tế",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6427), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân Pickleball F",
                            PricePerHour = 280000m,
                            SportsComplexId = 3,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 14,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6429), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân mở ban đêm, có đèn chiếu",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6430), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân cầu lông F",
                            PricePerHour = 270000m,
                            SportsComplexId = 4,
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.CourtBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourtId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsNotified")
                        .HasColumnType("bit");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("CourtBookings");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(5965), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Gói dịch vụ 30 ngày",
                            DurationDays = 30,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(5984), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Basic",
                            Price = 10000m,
                            Type = "PackageHLV"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6003), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Gói cao cấp 90 ngày",
                            DurationDays = 90,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6004), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Premium",
                            Price = 10000m,
                            Type = "PackageHLV"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6007), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Gói dịch vụ 30 ngày",
                            DurationDays = 30,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6007), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Basic",
                            Price = 10000m,
                            Type = "PackageHLV"
                        });
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CoachBookingId")
                        .HasColumnType("int");

                    b.Property<int?>("CourtBookingId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoachBookingId");

                    b.HasIndex("CourtBookingId");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.PaymentTemp", b =>
                {
                    b.Property<long>("OrderCode")
                        .HasColumnType("bigint");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderCode");

                    b.ToTable("PaymentTemps");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<int>("RevieweeId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RevieweeId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "HLV rất chuyên nghiệp, hướng dẫn tận tình.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6499), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6499), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 4,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Chủ sân thân thiện, sân sạch đẹp.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6504), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6505), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 3,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Chủ sân hỗ trợ rất nhiệt tình và chuyên nghiệp.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6507), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6508), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 3,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Không gian rộng rãi, dễ đặt lịch.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6509), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6510), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 3,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Thỉnh thoảng hơi chậm phản hồi tin nhắn.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6512), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6512), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 3,
                            RevieweeId = 3,
                            ReviewerId = 4
                        },
                        new
                        {
                            Id = 6,
                            Comment = "Chủ sân dễ tính, rất dễ thương!",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6514), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6515), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 3,
                            ReviewerId = 4
                        },
                        new
                        {
                            Id = 7,
                            Comment = "Sân tốt, chủ sân chu đáo.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6516), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6517), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 3,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Quản lý chuyên nghiệp, xử lý tình huống nhanh chóng.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6518), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6519), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 3,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 9,
                            Comment = "Dịch vụ ổn, sẽ quay lại lần nữa.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6521), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6521), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 3,
                            ReviewerId = 1
                        },
                        new
                        {
                            Id = 10,
                            Comment = "Chủ sân rất thân thiện, đáng tin cậy.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6523), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6523), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 3,
                            ReviewerId = 1
                        },
                        new
                        {
                            Id = 11,
                            Comment = "Cần cải thiện thời gian mở cửa đúng giờ hơn.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6525), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6526), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 3,
                            RevieweeId = 3,
                            ReviewerId = 1
                        },
                        new
                        {
                            Id = 12,
                            Comment = "Chất lượng phục vụ tuyệt vời!",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6527), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6528), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 3,
                            ReviewerId = 1
                        },
                        new
                        {
                            Id = 13,
                            Comment = "HLV rất tâm huyết và chuyên nghiệp.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6574), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6575), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 4,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 14,
                            Comment = "Giảng dạy dễ hiểu, thái độ thân thiện.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6577), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6577), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 4,
                            ReviewerId = 3
                        },
                        new
                        {
                            Id = 15,
                            Comment = "Tận tình hỗ trợ, kỹ năng tốt.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6579), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6580), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 4,
                            ReviewerId = 5
                        },
                        new
                        {
                            Id = 16,
                            Comment = "Cực kỳ có trách nhiệm với học viên.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6582), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6582), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 4,
                            ReviewerId = 6
                        },
                        new
                        {
                            Id = 17,
                            Comment = "Phương pháp huấn luyện rõ ràng.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6633), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6633), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 5,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 18,
                            Comment = "Đúng giờ, vui vẻ và tận tâm.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6637), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6638), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 5,
                            ReviewerId = 3
                        },
                        new
                        {
                            Id = 19,
                            Comment = "Cải thiện kỹ năng rõ rệt sau vài buổi.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6639), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6640), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 5,
                            ReviewerId = 6
                        },
                        new
                        {
                            Id = 20,
                            Comment = "Kỹ năng truyền đạt tốt, dễ hiểu.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6642), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6642), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 5,
                            ReviewerId = 7
                        },
                        new
                        {
                            Id = 21,
                            Comment = "Cần tăng tính kỷ luật, nhưng kỹ năng ổn.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6644), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6645), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 3,
                            RevieweeId = 6,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 22,
                            Comment = "Nhiệt tình, vui vẻ, luôn động viên học viên.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6647), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6647), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 6,
                            ReviewerId = 3
                        },
                        new
                        {
                            Id = 23,
                            Comment = "Bài tập sáng tạo, dễ áp dụng.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6649), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6650), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 6,
                            ReviewerId = 4
                        },
                        new
                        {
                            Id = 24,
                            Comment = "Có chuyên môn cao, dễ tiếp cận.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6651), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6652), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 6,
                            ReviewerId = 5
                        },
                        new
                        {
                            Id = 25,
                            Comment = "Giúp tôi nâng cao thể lực rõ rệt.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6654), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6654), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 7,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 26,
                            Comment = "Đào tạo bài bản, bài tập phù hợp trình độ.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6656), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6657), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 7,
                            ReviewerId = 3
                        },
                        new
                        {
                            Id = 27,
                            Comment = "Thời gian linh hoạt, hỗ trợ tốt.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6658), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6659), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 7,
                            ReviewerId = 4
                        },
                        new
                        {
                            Id = 28,
                            Comment = "Có kinh nghiệm thực tế, phong cách giảng dạy chuyên nghiệp.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6661), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6662), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 7,
                            ReviewerId = 6
                        },
                        new
                        {
                            Id = 29,
                            Comment = "Khả năng truyền đạt tốt, thân thiện.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6663), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6664), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 8,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 30,
                            Comment = "Kiến thức vững, giao tiếp tốt.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6666), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6666), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 8,
                            ReviewerId = 3
                        },
                        new
                        {
                            Id = 31,
                            Comment = "Luôn khuyến khích học viên cố gắng.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6668), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6669), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 8,
                            ReviewerId = 4
                        },
                        new
                        {
                            Id = 32,
                            Comment = "Cực kỳ chuyên nghiệp và dễ thương.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6670), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6671), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 8,
                            ReviewerId = 5
                        },
                        new
                        {
                            Id = 33,
                            Comment = "Bài giảng sáng tạo, dễ hiểu.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6673), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6673), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 9,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 34,
                            Comment = "Có nhiều kinh nghiệm thực chiến.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6675), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6676), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 9,
                            ReviewerId = 3
                        },
                        new
                        {
                            Id = 35,
                            Comment = "Tận tâm với học viên, hỗ trợ thêm ngoài giờ.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6677), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6678), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 9,
                            ReviewerId = 6
                        },
                        new
                        {
                            Id = 36,
                            Comment = "Chuyên nghiệp, luôn đúng giờ.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6679), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6680), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 9,
                            ReviewerId = 7
                        },
                        new
                        {
                            Id = 37,
                            Comment = "Nội dung giảng dạy phù hợp từng người.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6682), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6682), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 10,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 38,
                            Comment = "Tạo động lực cho học viên rất tốt.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6685), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6685), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 10,
                            ReviewerId = 3
                        },
                        new
                        {
                            Id = 39,
                            Comment = "Rất tận tình, thân thiện.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6687), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6688), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 10,
                            ReviewerId = 4
                        },
                        new
                        {
                            Id = 40,
                            Comment = "Phong cách dạy chuyên nghiệp và hiệu quả.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6692), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6692), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 10,
                            ReviewerId = 5
                        },
                        new
                        {
                            Id = 41,
                            Comment = "HLV dày dạn kinh nghiệm, đáng học hỏi.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6695), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6696), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 11,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 42,
                            Comment = "Dạy dễ hiểu, luôn hỗ trợ đúng lúc.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6697), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6698), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 11,
                            ReviewerId = 3
                        },
                        new
                        {
                            Id = 43,
                            Comment = "Phong thái chuyên nghiệp, vui vẻ.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6700), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6700), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 11,
                            ReviewerId = 6
                        },
                        new
                        {
                            Id = 44,
                            Comment = "Giúp tôi cải thiện kỹ thuật rõ rệt.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6702), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6702), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 11,
                            ReviewerId = 7
                        });
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourtId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HostId")
                        .HasColumnType("int");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RoomFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("HostId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourtId = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6942), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Tập hợp anh em giao lưu bóng đá sáng thứ 7.",
                            HostId = 2,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6943), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxPlayers = 10,
                            Name = "Team Sáng Thứ 7",
                            RoomFee = 30000m,
                            ScheduledTime = new DateTime(2025, 6, 1, 7, 0, 0, 0, DateTimeKind.Local),
                            Status = "Waiting"
                        },
                        new
                        {
                            Id = 2,
                            CourtId = 2,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7019), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Tìm đối đá giao hữu 7v7 buổi tối.",
                            HostId = 3,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7020), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxPlayers = 14,
                            Name = "Giao lưu buổi tối",
                            RoomFee = 50000m,
                            ScheduledTime = new DateTime(2025, 6, 2, 20, 0, 0, 0, DateTimeKind.Local),
                            Status = "Completed"
                        },
                        new
                        {
                            Id = 3,
                            CourtId = 3,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7025), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Đánh cầu cuối tuần, vui vẻ là chính.",
                            HostId = 2,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7026), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxPlayers = 4,
                            Name = "Badminton Team CN",
                            RoomFee = 20000m,
                            ScheduledTime = new DateTime(2025, 6, 3, 9, 0, 0, 0, DateTimeKind.Local),
                            Status = "Full"
                        },
                        new
                        {
                            Id = 4,
                            CourtId = 4,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7030), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Tìm team giao lưu vào chiều thứ 5.",
                            HostId = 2,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7031), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxPlayers = 10,
                            Name = "Đá bóng chiều thứ 5",
                            RoomFee = 30000m,
                            ScheduledTime = new DateTime(2025, 6, 4, 17, 0, 0, 0, DateTimeKind.Local),
                            Status = "Waiting"
                        },
                        new
                        {
                            Id = 5,
                            CourtId = 5,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7035), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Pickleball nhẹ nhàng chủ nhật.",
                            HostId = 3,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7035), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxPlayers = 4,
                            Name = "Pickleball sáng CN",
                            RoomFee = 40000m,
                            ScheduledTime = new DateTime(2025, 6, 5, 7, 0, 0, 0, DateTimeKind.Local),
                            Status = "Waiting"
                        },
                        new
                        {
                            Id = 6,
                            CourtId = 6,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7039), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Giao lưu Pickleball chiều cuối tuần.",
                            HostId = 2,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7040), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxPlayers = 4,
                            Name = "Pickleball chiều thứ 7",
                            RoomFee = 50000m,
                            ScheduledTime = new DateTime(2025, 6, 6, 15, 0, 0, 0, DateTimeKind.Local),
                            Status = "Waiting"
                        },
                        new
                        {
                            Id = 7,
                            CourtId = 7,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7043), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Team Pickleball tụ tập tối thứ 3.",
                            HostId = 3,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7044), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxPlayers = 10,
                            Name = "Pickleball tối thứ 3",
                            RoomFee = 25000m,
                            ScheduledTime = new DateTime(2025, 6, 3, 20, 0, 0, 0, DateTimeKind.Local),
                            Status = "Waiting"
                        },
                        new
                        {
                            Id = 8,
                            CourtId = 8,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7049), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Vui là chính, ai cũng có thể tham gia.",
                            HostId = 2,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7049), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxPlayers = 10,
                            Name = "Pickleball phong trào",
                            RoomFee = 20000m,
                            ScheduledTime = new DateTime(2025, 6, 2, 18, 0, 0, 0, DateTimeKind.Local),
                            Status = "Full"
                        },
                        new
                        {
                            Id = 9,
                            CourtId = 10,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7054), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Đội hình luyện tập chuẩn bị giải.",
                            HostId = 3,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7054), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxPlayers = 12,
                            Name = "Cầu lông tập luyện",
                            RoomFee = 35000m,
                            ScheduledTime = new DateTime(2025, 6, 1, 16, 0, 0, 0, DateTimeKind.Local),
                            Status = "Waiting"
                        },
                        new
                        {
                            Id = 10,
                            CourtId = 12,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7058), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Team cầu lông nhẹ nhàng tối làm về.",
                            HostId = 2,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7059), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxPlayers = 4,
                            Name = "Chơi cầu lông tối",
                            RoomFee = 25000m,
                            ScheduledTime = new DateTime(2025, 6, 4, 19, 0, 0, 0, DateTimeKind.Local),
                            Status = "Waiting"
                        });
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.RoomJoinRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequesterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RequesterId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomJoinRequests");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.RoomPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsNotified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomPlayers");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoachBookingId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CoachBookingId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.SportsComplex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("SportsComplexes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Sân bóng đá Tao Đàn, 1 Huyền Trân Công Chúa, Quận 1, TP.HCM",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6290), new TimeSpan(0, 7, 0, 0, 0)),
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6291), new TimeSpan(0, 7, 0, 0, 0)),
                            Latitude = 10.773444,
                            Longitude = 106.690933,
                            Name = "Khu Thể Thao ABC",
                            OwnerId = 3,
                            Status = "Active",
                            Type = "Bóng đá"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Sân cầu lông Hồ Kỳ Hòa, 27 Cao Thắng, Quận 3, TP.HCM",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6303), new TimeSpan(0, 7, 0, 0, 0)),
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6304), new TimeSpan(0, 7, 0, 0, 0)),
                            Latitude = 10.768492999999999,
                            Longitude = 106.681771,
                            Name = "Khu Thể Thao DEF",
                            OwnerId = 3,
                            Status = "Active",
                            Type = "Cầu lông"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Sân thể thao Rạch Miễu, 1 Hoa Phượng, Phú Nhuận, TP.HCM",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6309), new TimeSpan(0, 7, 0, 0, 0)),
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6309), new TimeSpan(0, 7, 0, 0, 0)),
                            Latitude = 10.800005000000001,
                            Longitude = 106.683813,
                            Name = "Khu Thể Thao GHI",
                            OwnerId = 3,
                            Status = "Active",
                            Type = "Pickleball"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Sân thể thao Vạn Tường, 59A Nguyễn Du, Quận 1, TP.HCM",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6313), new TimeSpan(0, 7, 0, 0, 0)),
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6314), new TimeSpan(0, 7, 0, 0, 0)),
                            Latitude = 10.77623,
                            Longitude = 106.699208,
                            Name = "Khu Thể Thao JKL",
                            OwnerId = 3,
                            Status = "Active",
                            Type = "Pickleball"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Sân cầu lông Quận 6, 42 Nguyễn Văn Luông, Quận 6, TP.HCM",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6317), new TimeSpan(0, 7, 0, 0, 0)),
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(6317), new TimeSpan(0, 7, 0, 0, 0)),
                            Latitude = 10.737717,
                            Longitude = 106.62858199999999,
                            Name = "Khu Thể Thao MNO",
                            OwnerId = 3,
                            Status = "Active",
                            Type = "Cầu lông"
                        });
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.UserMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("UserMessages");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Voucher");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "VOUCHER1",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7135), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Giảm 10% cho booking đầu tiên",
                            DiscountPercent = 10,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7135), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            Code = "VOUCHER2",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7140), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Hỗ trợ website giảm 5%",
                            DiscountPercent = 5,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 20, 420, DateTimeKind.Unspecified).AddTicks(7141), new TimeSpan(0, 7, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("TeamUp.Repositories.Entity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Certificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Experience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Height")
                        .HasColumnType("real");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<decimal?>("PricePerSession")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RefreshTokenExpiryTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusForCoach")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetObject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.Property<string>("WorkingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkingDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PackageId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "864e7c77-dc69-4d49-8e2c-5279fc75aa01",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 459, DateTimeKind.Unspecified).AddTicks(8853), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "admin@teamup.com",
                            EmailConfirmed = true,
                            FullName = "System Admin",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 459, DateTimeKind.Unspecified).AddTicks(8855), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TEAMUP.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHQNhgiHLXF+LVtZNEX+NI1CdUoa6R8h+TTsxs6yDMZLmlBnxBU86g+Zd5phdoswpQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "b2fde84d-8b5f-44b4-b52a-1b7dfa66987e",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "900e2e2b-af7b-4dac-8f0d-54c739253a0c",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 545, DateTimeKind.Unspecified).AddTicks(3298), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "player@teamup.com",
                            EmailConfirmed = true,
                            FullName = "Người Chơi A",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 545, DateTimeKind.Unspecified).AddTicks(3316), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "PLAYER@TEAMUP.COM",
                            NormalizedUserName = "PLAYER",
                            PasswordHash = "AQAAAAIAAYagAAAAEMXRDT9Ioz8k3b2Iw4kmgWvW5Qb3EKKDHaFKXE7qbZ3MY25o0zzsFzUm7r3JXEkKZA==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "49e9ac01-98f6-436a-bc43-429e298d78de",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "player"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9c9941b-cea2-445d-b95c-bffe4d0815a4",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 638, DateTimeKind.Unspecified).AddTicks(9693), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "chusan@teamup.com",
                            EmailConfirmed = true,
                            FullName = "Chủ Sân A",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 639, DateTimeKind.Unspecified).AddTicks(298), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "CHUSAN@TEAMUP.COM",
                            NormalizedUserName = "CHUSAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKyYSJSsE7X5Znj9+kiLr3btKC1fxH0xK+hVk5OypPmh/S4peIjVbEFxt8wAXCl/BA==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "c0792ed2-5619-4944-b057-fa0baae63e4c",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "chusan"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Certificate = "Chứng chỉ A",
                            ConcurrencyStamp = "f3c67dad-8498-4d59-bfc8-892ce6d92a27",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 737, DateTimeKind.Unspecified).AddTicks(6011), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "coach@teamup.com",
                            EmailConfirmed = true,
                            Experience = "5 năm huấn luyện đội trẻ U15",
                            FullName = "HLV B",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 737, DateTimeKind.Unspecified).AddTicks(6031), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH@TEAMUP.COM",
                            NormalizedUserName = "COACH",
                            PasswordHash = "AQAAAAIAAYagAAAAELI691WvYkf+AxLDFLQf8XQ0IOe02QGCdDi6OF9ue+DyHLIfivgJktveRVTykZZWZg==",
                            PhoneNumberConfirmed = false,
                            PricePerSession = 5000m,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "578883f1-88d4-4225-b9a5-b081beb23f30",
                            Specialty = "Bóng đá",
                            Status = 1,
                            StatusForCoach = "Active",
                            TargetObject = "Trẻ em, thanh thiếu niên",
                            TwoFactorEnabled = false,
                            Type = "Bóng đá",
                            UserName = "coach",
                            WorkingAddress = "Sân ABC, Quận 1",
                            WorkingDate = "Thứ 2, 4, 6"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Certificate = "Chứng chỉ B",
                            ConcurrencyStamp = "1f763af9-dfb2-443d-b282-f9d84ed8afcd",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 827, DateTimeKind.Unspecified).AddTicks(4317), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "coach1@teamup.com",
                            EmailConfirmed = true,
                            Experience = "5 năm huấn luyện đội trẻ U15",
                            FullName = "HLV 1",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 827, DateTimeKind.Unspecified).AddTicks(4345), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH1@TEAMUP.COM",
                            NormalizedUserName = "COACH1",
                            PasswordHash = "AQAAAAIAAYagAAAAEJbkT0mmMOB2ZECQI1vaDj1HHPQZgXgZrwZo8w6xkS8wAVFNocDCvYE2zRG20WjMkQ==",
                            PhoneNumberConfirmed = false,
                            PricePerSession = 250000m,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "4282a6b4-d4a1-4ae2-9c7e-5703aa730835",
                            Specialty = "Bóng đá",
                            Status = 1,
                            StatusForCoach = "Active",
                            TargetObject = "Trẻ em, thanh thiếu niên",
                            TwoFactorEnabled = false,
                            Type = "Bóng đá",
                            UserName = "coach1",
                            WorkingAddress = "Sân XYZ, Quận 5",
                            WorkingDate = "Thứ 3, 5"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Certificate = "Chứng chỉ C",
                            ConcurrencyStamp = "33a06d37-2946-4f4d-9e6f-9a4d2458eb08",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 827, DateTimeKind.Unspecified).AddTicks(4503), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "coach2@teamup.com",
                            EmailConfirmed = true,
                            Experience = "3 năm huấn luyện cá nhân và nhóm",
                            FullName = "HLV 2",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 827, DateTimeKind.Unspecified).AddTicks(4504), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH2@TEAMUP.COM",
                            NormalizedUserName = "COACH2",
                            PasswordHash = "AQAAAAIAAYagAAAAEMbiEwR2enDeiH3pVzflSkkQxR3xClXNk0PNVPjFRA5Q2Vf1Jkd6QPo93PL9qxfx3A==",
                            PhoneNumberConfirmed = false,
                            PricePerSession = 180000m,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "bb87d827-a9cb-4df6-abc7-9972324961ce",
                            Specialty = "Cầu lông",
                            Status = 1,
                            StatusForCoach = "Active",
                            TargetObject = "Người lớn, học sinh",
                            TwoFactorEnabled = false,
                            Type = "Cầu lông",
                            UserName = "coach2",
                            WorkingAddress = "Sân Lông, Quận 2",
                            WorkingDate = "Thứ 2, 4"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Certificate = "Chứng chỉ D",
                            ConcurrencyStamp = "5b171f25-2cbb-40d5-87bd-6c7277e2fb92",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 827, DateTimeKind.Unspecified).AddTicks(4515), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "coach3@teamup.com",
                            EmailConfirmed = true,
                            Experience = "2 năm giảng dạy cho người mới bắt đầu",
                            FullName = "HLV 3",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 827, DateTimeKind.Unspecified).AddTicks(4517), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH3@TEAMUP.COM",
                            NormalizedUserName = "COACH3",
                            PasswordHash = "AQAAAAIAAYagAAAAEP0n8+0PDw3O05UOm8Rhh4ShXt38DtIhTn8qk57BOH/ctZiKnzBK1KFOiqRukTiS4Q==",
                            PhoneNumberConfirmed = false,
                            PricePerSession = 220000m,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "f37b6cba-13c8-4d75-8945-3b0f71dc7d0d",
                            Specialty = "Pickleball",
                            Status = 1,
                            StatusForCoach = "Active",
                            TargetObject = "Người mới chơi, người cao tuổi",
                            TwoFactorEnabled = false,
                            Type = "Pickleball",
                            UserName = "coach3",
                            WorkingAddress = "Sân PB, Quận 7",
                            WorkingDate = "Thứ 6, 7"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Certificate = "Chứng chỉ A",
                            ConcurrencyStamp = "ec8f16ec-c18d-4691-9cc4-880af181af54",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 827, DateTimeKind.Unspecified).AddTicks(4758), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "coach4@teamup.com",
                            EmailConfirmed = true,
                            Experience = "8 năm làm HLV cho các đội phong trào",
                            FullName = "HLV 4",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 827, DateTimeKind.Unspecified).AddTicks(4760), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH4@TEAMUP.COM",
                            NormalizedUserName = "COACH4",
                            PasswordHash = "AQAAAAIAAYagAAAAEL3vRQiDEKhaGUmwvqCwnId3hYsu3iF9AQVHvp5Crbww3SerQWdGARw75EOOIKHYTQ==",
                            PhoneNumberConfirmed = false,
                            PricePerSession = 230000m,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "833c704f-5acf-42d9-bc7a-a0ee47c2b225",
                            Specialty = "Bóng đá",
                            Status = 1,
                            StatusForCoach = "Active",
                            TargetObject = "Người lớn, sinh viên",
                            TwoFactorEnabled = false,
                            Type = "Bóng đá",
                            UserName = "coach4",
                            WorkingAddress = "Sân K, Quận 6",
                            WorkingDate = "Thứ 3, 6"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Certificate = "Chứng chỉ B",
                            ConcurrencyStamp = "59e27220-4256-494c-ac33-499eae453a5c",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 827, DateTimeKind.Unspecified).AddTicks(4770), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "coach5@teamup.com",
                            EmailConfirmed = true,
                            Experience = "4 năm giảng dạy tại trung tâm thể thao",
                            FullName = "HLV 5",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 827, DateTimeKind.Unspecified).AddTicks(4772), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH5@TEAMUP.COM",
                            NormalizedUserName = "COACH5",
                            PasswordHash = "AQAAAAIAAYagAAAAEIqezacBCV0OTszQBYHN0/EjtwUzsEZPFGY3clZVFSSMF414r2mVzTshWq26EOgedw==",
                            PhoneNumberConfirmed = false,
                            PricePerSession = 190000m,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "f5e00413-6671-42d6-8247-1c8e7b9938a8",
                            Specialty = "Cầu lông",
                            Status = 1,
                            StatusForCoach = "Active",
                            TargetObject = "Thiếu nhi, người đi làm",
                            TwoFactorEnabled = false,
                            Type = "Cầu lông",
                            UserName = "coach5",
                            WorkingAddress = "Sân Mây, Quận 10",
                            WorkingDate = "Thứ 2, 5"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Certificate = "Chứng chỉ E",
                            ConcurrencyStamp = "50418fae-c833-4939-97b9-edfc2b82ca19",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 827, DateTimeKind.Unspecified).AddTicks(4780), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "coach6@teamup.com",
                            EmailConfirmed = true,
                            Experience = "1 năm hỗ trợ luyện tập cơ bản và thi đấu",
                            FullName = "HLV 6",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 827, DateTimeKind.Unspecified).AddTicks(4782), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH6@TEAMUP.COM",
                            NormalizedUserName = "COACH6",
                            PasswordHash = "AQAAAAIAAYagAAAAEHNNpD4MgooN5k1TN7s+NrYmP0nzpwYqaEb5MYMf3fM4NXKQ6dAhA+hKaeH8cjiOnw==",
                            PhoneNumberConfirmed = false,
                            PricePerSession = 210000m,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "b03d1245-7762-465c-ac28-d28eefb61685",
                            Specialty = "Pickleball",
                            Status = 1,
                            StatusForCoach = "Active",
                            TargetObject = "Người cao tuổi, học viên nữ",
                            TwoFactorEnabled = false,
                            Type = "Pickleball",
                            UserName = "coach6",
                            WorkingAddress = "Sân Pick, Quận 9",
                            WorkingDate = "Thứ 4, 7"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Certificate = "Chứng chỉ C",
                            ConcurrencyStamp = "65473526-b565-4994-8885-485bbd1da5e5",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 827, DateTimeKind.Unspecified).AddTicks(4791), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "coach7@teamup.com",
                            EmailConfirmed = true,
                            Experience = "6 năm giảng dạy các lớp nâng cao",
                            FullName = "HLV 7",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 31, 16, 47, 19, 827, DateTimeKind.Unspecified).AddTicks(4804), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH7@TEAMUP.COM",
                            NormalizedUserName = "COACH7",
                            PasswordHash = "AQAAAAIAAYagAAAAEJXzii9CaLKzSySCALr6SQeg45ZtUbcjJV0jqm1tLgj9w9nMDjsSNXQcEDYoOnqRKg==",
                            PhoneNumberConfirmed = false,
                            PricePerSession = 240000m,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "d4a99b60-7af3-4bdc-8b52-f61a8c3b37ce",
                            Specialty = "Bóng đá",
                            Status = 1,
                            StatusForCoach = "Active",
                            TargetObject = "Học viên đã có nền tảng",
                            TwoFactorEnabled = false,
                            Type = "Bóng đá",
                            UserName = "coach7",
                            WorkingAddress = "Sân Gold, Quận Tân Bình",
                            WorkingDate = "Thứ 3, 5, 7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("TeamUp.Contract.Repositories.Entity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.ApplicationUserRole", b =>
                {
                    b.HasOne("TeamUp.Contract.Repositories.Entity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.CoachBooking", b =>
                {
                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "Coach")
                        .WithMany("CoachBookingsAsCoach")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeamUp.Contract.Repositories.Entity.Court", "Court")
                        .WithMany("CoachBookings")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "Player")
                        .WithMany("CoachBookingsAsPlayer")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeamUp.Contract.Repositories.Entity.Voucher", "Voucher")
                        .WithMany("CoachBookings")
                        .HasForeignKey("VoucherId");

                    b.Navigation("Coach");

                    b.Navigation("Court");

                    b.Navigation("Player");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Court", b =>
                {
                    b.HasOne("TeamUp.Contract.Repositories.Entity.SportsComplex", "SportsComplex")
                        .WithMany("Courts")
                        .HasForeignKey("SportsComplexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportsComplex");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.CourtBooking", b =>
                {
                    b.HasOne("TeamUp.Contract.Repositories.Entity.Court", "Court")
                        .WithMany("CourtBookings")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "User")
                        .WithMany("CourtBookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeamUp.Contract.Repositories.Entity.Voucher", "Voucher")
                        .WithMany("CourtBookings")
                        .HasForeignKey("VoucherId");

                    b.Navigation("Court");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Payment", b =>
                {
                    b.HasOne("TeamUp.Contract.Repositories.Entity.CoachBooking", "CoachBooking")
                        .WithMany("Payments")
                        .HasForeignKey("CoachBookingId");

                    b.HasOne("TeamUp.Contract.Repositories.Entity.CourtBooking", "CourtBooking")
                        .WithMany("Payments")
                        .HasForeignKey("CourtBookingId");

                    b.HasOne("TeamUp.Contract.Repositories.Entity.Package", "Package")
                        .WithMany("Payments")
                        .HasForeignKey("PackageId");

                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoachBooking");

                    b.Navigation("CourtBooking");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Rating", b =>
                {
                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "Reviewee")
                        .WithMany("RatingsReceived")
                        .HasForeignKey("RevieweeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "Reviewer")
                        .WithMany("RatingsGiven")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reviewee");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Room", b =>
                {
                    b.HasOne("TeamUp.Contract.Repositories.Entity.Court", "Court")
                        .WithMany("Rooms")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "Host")
                        .WithMany("HostedRooms")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Court");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.RoomJoinRequest", b =>
                {
                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "Requester")
                        .WithMany("RoomJoinRequests")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamUp.Contract.Repositories.Entity.Room", "Room")
                        .WithMany("JoinRequests")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requester");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.RoomPlayer", b =>
                {
                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "Player")
                        .WithMany("RoomPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamUp.Contract.Repositories.Entity.Room", "Room")
                        .WithMany("RoomPlayers")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Slot", b =>
                {
                    b.HasOne("TeamUp.Contract.Repositories.Entity.CoachBooking", "CoachBooking")
                        .WithMany("Slots")
                        .HasForeignKey("CoachBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoachBooking");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.SportsComplex", b =>
                {
                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "Owner")
                        .WithMany("SportsComplexs")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.UserMessage", b =>
                {
                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "Recipient")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TeamUp.Repositories.Entity.ApplicationUser", b =>
                {
                    b.HasOne("TeamUp.Contract.Repositories.Entity.Package", "Package")
                        .WithMany("Users")
                        .HasForeignKey("PackageId");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.CoachBooking", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Court", b =>
                {
                    b.Navigation("CoachBookings");

                    b.Navigation("CourtBookings");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.CourtBooking", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Package", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Room", b =>
                {
                    b.Navigation("JoinRequests");

                    b.Navigation("RoomPlayers");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.SportsComplex", b =>
                {
                    b.Navigation("Courts");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Voucher", b =>
                {
                    b.Navigation("CoachBookings");

                    b.Navigation("CourtBookings");
                });

            modelBuilder.Entity("TeamUp.Repositories.Entity.ApplicationUser", b =>
                {
                    b.Navigation("CoachBookingsAsCoach");

                    b.Navigation("CoachBookingsAsPlayer");

                    b.Navigation("CourtBookings");

                    b.Navigation("HostedRooms");

                    b.Navigation("Payments");

                    b.Navigation("RatingsGiven");

                    b.Navigation("RatingsReceived");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("RoomJoinRequests");

                    b.Navigation("RoomPlayers");

                    b.Navigation("SentMessages");

                    b.Navigation("SportsComplexs");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
