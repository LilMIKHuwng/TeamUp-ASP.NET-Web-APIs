// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamUp.Repositories.Context;

#nullable disable

namespace TeamUp.Repositories.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250524103608_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 5, 756, DateTimeKind.Unspecified).AddTicks(55), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Quản trị viên",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 5, 756, DateTimeKind.Unspecified).AddTicks(103), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 5, 756, DateTimeKind.Unspecified).AddTicks(111), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Người dùng thông thường",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 5, 756, DateTimeKind.Unspecified).AddTicks(112), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 5, 756, DateTimeKind.Unspecified).AddTicks(115), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Chủ sân thể thao",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 5, 756, DateTimeKind.Unspecified).AddTicks(116), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 5, 756, DateTimeKind.Unspecified).AddTicks(118), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Coach / Trainer",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 5, 756, DateTimeKind.Unspecified).AddTicks(119), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Coach",
                            NormalizedName = "COACH"
                        });
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.CoachBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<int>("CourtId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsNotified")
                        .HasColumnType("bit");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("SelectedDates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("CourtId");

                    b.HasIndex("PlayerId");

                    b.ToTable("CoachBookings");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Court", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SportsComplexId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SportsComplexId");

                    b.ToTable("Courts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5622), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân cỏ nhân tạo tiêu chuẩn",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5623), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân 5 người A",
                            PricePerHour = 10000m,
                            SportsComplexId = 1,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5628), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân chất lượng cao, đèn chiếu sáng ban đêm",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5630), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân 7 người B",
                            PricePerHour = 350000m,
                            SportsComplexId = 1,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5632), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân trong nhà, chuẩn thi đấu",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5634), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân cầu lông A",
                            PricePerHour = 150000m,
                            SportsComplexId = 2,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5636), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân chuẩn phong trào",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5637), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân cầu lông B",
                            PricePerHour = 100000m,
                            SportsComplexId = 2,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5639), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân ngoài trời, chất lượng cao",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5640), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân Pickleball A",
                            PricePerHour = 250000m,
                            SportsComplexId = 3,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5642), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân trong nhà, có mái che",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5643), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân Pickleball B",
                            PricePerHour = 300000m,
                            SportsComplexId = 3,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5645), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân chuẩn FIBA, sàn gỗ cao cấp",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5647), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân Pickleball C",
                            PricePerHour = 400000m,
                            SportsComplexId = 4,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5648), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân phong trào, phù hợp nhóm bạn",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5650), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân Pickleball D",
                            PricePerHour = 250000m,
                            SportsComplexId = 4,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5652), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân luyện tập cá nhân",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5653), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân Pickleball E",
                            PricePerHour = 200000m,
                            SportsComplexId = 4,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5655), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân trong nhà, chuẩn thi đấu",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5656), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân cầu lông C",
                            PricePerHour = 300000m,
                            SportsComplexId = 5,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5658), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân ngoài trời, thoáng mát",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5659), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân cầu lông D",
                            PricePerHour = 200000m,
                            SportsComplexId = 5,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 12,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5661), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân thi đấu chuyên nghiệp",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5662), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân cầu lông E",
                            PricePerHour = 350000m,
                            SportsComplexId = 5,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 13,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5664), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân tiêu chuẩn quốc tế",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5666), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân Pickleball F",
                            PricePerHour = 280000m,
                            SportsComplexId = 3,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 14,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5669), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Sân mở ban đêm, có đèn chiếu",
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5670), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Sân cầu lông F",
                            PricePerHour = 270000m,
                            SportsComplexId = 4,
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.CourtBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourtId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsNotified")
                        .HasColumnType("bit");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserId");

                    b.ToTable("CourtBookings");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5064), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Gói dịch vụ 365 ngày",
                            DurationDays = 30,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5084), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Basic",
                            Price = 10000m,
                            Type = "PackageHLV"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5096), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Gói cao cấp 1095 ngày",
                            DurationDays = 90,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5097), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Premium",
                            Price = 599000m,
                            Type = "PackageHLV"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5100), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Gói cao cấp 1095 ngày",
                            DurationDays = 30,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5101), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Basic",
                            Price = 199000m,
                            Type = "PackageHLV"
                        });
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CoachBookingId")
                        .HasColumnType("int");

                    b.Property<int?>("CourtBookingId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoachBookingId");

                    b.HasIndex("CourtBookingId");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.PaymentTemp", b =>
                {
                    b.Property<long>("OrderCode")
                        .HasColumnType("bigint");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderCode");

                    b.ToTable("PaymentTemps");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<int>("RevieweeId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RevieweeId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "HLV rất chuyên nghiệp, hướng dẫn tận tình.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5749), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5750), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 4,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Chủ sân thân thiện, sân sạch đẹp.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5755), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5756), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 3,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Chủ sân hỗ trợ rất nhiệt tình và chuyên nghiệp.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5758), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5759), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 3,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Không gian rộng rãi, dễ đặt lịch.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5761), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5762), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 3,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Thỉnh thoảng hơi chậm phản hồi tin nhắn.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5763), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5764), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 3,
                            RevieweeId = 3,
                            ReviewerId = 4
                        },
                        new
                        {
                            Id = 6,
                            Comment = "Chủ sân dễ tính, rất dễ thương!",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5766), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5767), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 3,
                            ReviewerId = 4
                        },
                        new
                        {
                            Id = 7,
                            Comment = "Sân tốt, chủ sân chu đáo.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5769), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5770), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 3,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Quản lý chuyên nghiệp, xử lý tình huống nhanh chóng.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5772), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5773), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 3,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 9,
                            Comment = "Dịch vụ ổn, sẽ quay lại lần nữa.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5774), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5775), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 3,
                            ReviewerId = 1
                        },
                        new
                        {
                            Id = 10,
                            Comment = "Chủ sân rất thân thiện, đáng tin cậy.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5777), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5778), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 3,
                            ReviewerId = 1
                        },
                        new
                        {
                            Id = 11,
                            Comment = "Cần cải thiện thời gian mở cửa đúng giờ hơn.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5780), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5781), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 3,
                            RevieweeId = 3,
                            ReviewerId = 1
                        },
                        new
                        {
                            Id = 12,
                            Comment = "Chất lượng phục vụ tuyệt vời!",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5783), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5784), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 3,
                            ReviewerId = 1
                        },
                        new
                        {
                            Id = 13,
                            Comment = "HLV rất tâm huyết và chuyên nghiệp.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5817), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5819), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 4,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 14,
                            Comment = "Giảng dạy dễ hiểu, thái độ thân thiện.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5820), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5822), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 4,
                            ReviewerId = 3
                        },
                        new
                        {
                            Id = 15,
                            Comment = "Tận tình hỗ trợ, kỹ năng tốt.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5823), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5824), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 4,
                            ReviewerId = 5
                        },
                        new
                        {
                            Id = 16,
                            Comment = "Cực kỳ có trách nhiệm với học viên.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5826), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5827), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 4,
                            ReviewerId = 6
                        },
                        new
                        {
                            Id = 17,
                            Comment = "Phương pháp huấn luyện rõ ràng.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5829), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5830), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 5,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 18,
                            Comment = "Đúng giờ, vui vẻ và tận tâm.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5832), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5833), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 5,
                            ReviewerId = 3
                        },
                        new
                        {
                            Id = 19,
                            Comment = "Cải thiện kỹ năng rõ rệt sau vài buổi.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5836), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5837), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 5,
                            ReviewerId = 6
                        },
                        new
                        {
                            Id = 20,
                            Comment = "Kỹ năng truyền đạt tốt, dễ hiểu.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5839), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5840), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 5,
                            ReviewerId = 7
                        },
                        new
                        {
                            Id = 21,
                            Comment = "Cần tăng tính kỷ luật, nhưng kỹ năng ổn.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5841), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5843), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 3,
                            RevieweeId = 6,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 22,
                            Comment = "Nhiệt tình, vui vẻ, luôn động viên học viên.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5879), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5880), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 6,
                            ReviewerId = 3
                        },
                        new
                        {
                            Id = 23,
                            Comment = "Bài tập sáng tạo, dễ áp dụng.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5882), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5883), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 6,
                            ReviewerId = 4
                        },
                        new
                        {
                            Id = 24,
                            Comment = "Có chuyên môn cao, dễ tiếp cận.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5885), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5886), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 6,
                            ReviewerId = 5
                        },
                        new
                        {
                            Id = 25,
                            Comment = "Giúp tôi nâng cao thể lực rõ rệt.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5888), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5889), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 7,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 26,
                            Comment = "Đào tạo bài bản, bài tập phù hợp trình độ.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5891), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5892), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 7,
                            ReviewerId = 3
                        },
                        new
                        {
                            Id = 27,
                            Comment = "Thời gian linh hoạt, hỗ trợ tốt.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5893), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5895), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 7,
                            ReviewerId = 4
                        },
                        new
                        {
                            Id = 28,
                            Comment = "Có kinh nghiệm thực tế, phong cách giảng dạy chuyên nghiệp.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5896), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5897), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 7,
                            ReviewerId = 6
                        },
                        new
                        {
                            Id = 29,
                            Comment = "Khả năng truyền đạt tốt, thân thiện.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5899), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5900), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 8,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 30,
                            Comment = "Kiến thức vững, giao tiếp tốt.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5902), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5903), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 8,
                            ReviewerId = 3
                        },
                        new
                        {
                            Id = 31,
                            Comment = "Luôn khuyến khích học viên cố gắng.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5904), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5906), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 8,
                            ReviewerId = 4
                        },
                        new
                        {
                            Id = 32,
                            Comment = "Cực kỳ chuyên nghiệp và dễ thương.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5907), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5908), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 8,
                            ReviewerId = 5
                        },
                        new
                        {
                            Id = 33,
                            Comment = "Bài giảng sáng tạo, dễ hiểu.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5910), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5911), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 9,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 34,
                            Comment = "Có nhiều kinh nghiệm thực chiến.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5913), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5914), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 9,
                            ReviewerId = 3
                        },
                        new
                        {
                            Id = 35,
                            Comment = "Tận tâm với học viên, hỗ trợ thêm ngoài giờ.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5915), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5916), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 9,
                            ReviewerId = 6
                        },
                        new
                        {
                            Id = 36,
                            Comment = "Chuyên nghiệp, luôn đúng giờ.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5918), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5919), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 9,
                            ReviewerId = 7
                        },
                        new
                        {
                            Id = 37,
                            Comment = "Nội dung giảng dạy phù hợp từng người.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5921), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5922), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 10,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 38,
                            Comment = "Tạo động lực cho học viên rất tốt.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5923), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5925), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 10,
                            ReviewerId = 3
                        },
                        new
                        {
                            Id = 39,
                            Comment = "Rất tận tình, thân thiện.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5926), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5927), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 10,
                            ReviewerId = 4
                        },
                        new
                        {
                            Id = 40,
                            Comment = "Phong cách dạy chuyên nghiệp và hiệu quả.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5929), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5930), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 10,
                            ReviewerId = 5
                        },
                        new
                        {
                            Id = 41,
                            Comment = "HLV dày dạn kinh nghiệm, đáng học hỏi.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5931), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5933), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 11,
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 42,
                            Comment = "Dạy dễ hiểu, luôn hỗ trợ đúng lúc.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5936), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5937), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 11,
                            ReviewerId = 3
                        },
                        new
                        {
                            Id = 43,
                            Comment = "Phong thái chuyên nghiệp, vui vẻ.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5938), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5939), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 4,
                            RevieweeId = 11,
                            ReviewerId = 6
                        },
                        new
                        {
                            Id = 44,
                            Comment = "Giúp tôi cải thiện kỹ thuật rõ rệt.",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5941), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5942), new TimeSpan(0, 7, 0, 0, 0)),
                            RatingValue = 5,
                            RevieweeId = 11,
                            ReviewerId = 7
                        });
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourtId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HostId")
                        .HasColumnType("int");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RoomFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("HostId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourtId = 1,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(6064), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Tập hợp anh em giao lưu bóng đá sáng thứ 7.",
                            HostId = 2,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(6066), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxPlayers = 10,
                            Name = "Team Sáng Thứ 7",
                            RoomFee = 30000m,
                            ScheduledTime = new DateTime(2025, 5, 25, 7, 0, 0, 0, DateTimeKind.Local),
                            Status = "Waiting"
                        },
                        new
                        {
                            Id = 2,
                            CourtId = 2,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(6092), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Tìm đối đá giao hữu 7v7 buổi tối.",
                            HostId = 3,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(6094), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxPlayers = 14,
                            Name = "Giao lưu buổi tối",
                            RoomFee = 50000m,
                            ScheduledTime = new DateTime(2025, 5, 26, 20, 0, 0, 0, DateTimeKind.Local),
                            Status = "Completed"
                        },
                        new
                        {
                            Id = 3,
                            CourtId = 3,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(6098), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Đánh cầu cuối tuần, vui vẻ là chính.",
                            HostId = 2,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(6099), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxPlayers = 4,
                            Name = "Badminton Team CN",
                            RoomFee = 20000m,
                            ScheduledTime = new DateTime(2025, 5, 27, 9, 0, 0, 0, DateTimeKind.Local),
                            Status = "Full"
                        },
                        new
                        {
                            Id = 4,
                            CourtId = 4,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(6102), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Tìm team giao lưu vào chiều thứ 5.",
                            HostId = 2,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(6103), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxPlayers = 10,
                            Name = "Đá bóng chiều thứ 5",
                            RoomFee = 30000m,
                            ScheduledTime = new DateTime(2025, 5, 28, 17, 0, 0, 0, DateTimeKind.Local),
                            Status = "Waiting"
                        },
                        new
                        {
                            Id = 5,
                            CourtId = 5,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(6106), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Pickleball nhẹ nhàng chủ nhật.",
                            HostId = 3,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(6107), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxPlayers = 4,
                            Name = "Pickleball sáng CN",
                            RoomFee = 40000m,
                            ScheduledTime = new DateTime(2025, 5, 29, 7, 0, 0, 0, DateTimeKind.Local),
                            Status = "Waiting"
                        },
                        new
                        {
                            Id = 6,
                            CourtId = 6,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(6110), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Giao lưu Pickleball chiều cuối tuần.",
                            HostId = 2,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(6111), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxPlayers = 4,
                            Name = "Pickleball chiều thứ 7",
                            RoomFee = 50000m,
                            ScheduledTime = new DateTime(2025, 5, 30, 15, 0, 0, 0, DateTimeKind.Local),
                            Status = "Waiting"
                        },
                        new
                        {
                            Id = 7,
                            CourtId = 7,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(6114), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Team Pickleball tụ tập tối thứ 3.",
                            HostId = 3,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(6115), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxPlayers = 10,
                            Name = "Pickleball tối thứ 3",
                            RoomFee = 25000m,
                            ScheduledTime = new DateTime(2025, 5, 27, 20, 0, 0, 0, DateTimeKind.Local),
                            Status = "Waiting"
                        },
                        new
                        {
                            Id = 8,
                            CourtId = 8,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(6118), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Vui là chính, ai cũng có thể tham gia.",
                            HostId = 2,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(6119), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxPlayers = 10,
                            Name = "Pickleball phong trào",
                            RoomFee = 20000m,
                            ScheduledTime = new DateTime(2025, 5, 26, 18, 0, 0, 0, DateTimeKind.Local),
                            Status = "Full"
                        },
                        new
                        {
                            Id = 9,
                            CourtId = 10,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(6122), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Đội hình luyện tập chuẩn bị giải.",
                            HostId = 3,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(6124), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxPlayers = 12,
                            Name = "Cầu lông tập luyện",
                            RoomFee = 35000m,
                            ScheduledTime = new DateTime(2025, 5, 25, 16, 0, 0, 0, DateTimeKind.Local),
                            Status = "Waiting"
                        },
                        new
                        {
                            Id = 10,
                            CourtId = 12,
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(6126), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Team cầu lông nhẹ nhàng tối làm về.",
                            HostId = 2,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(6128), new TimeSpan(0, 7, 0, 0, 0)),
                            MaxPlayers = 4,
                            Name = "Chơi cầu lông tối",
                            RoomFee = 25000m,
                            ScheduledTime = new DateTime(2025, 5, 28, 19, 0, 0, 0, DateTimeKind.Local),
                            Status = "Waiting"
                        });
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.RoomJoinRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequesterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RequesterId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomJoinRequests");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.RoomPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsNotified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomPlayers");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.SportsComplex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("SportsComplexes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Sân bóng đá Tao Đàn, 1 Huyền Trân Công Chúa, Quận 1, TP.HCM",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5231), new TimeSpan(0, 7, 0, 0, 0)),
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5232), new TimeSpan(0, 7, 0, 0, 0)),
                            Latitude = 10.773444,
                            Longitude = 106.690933,
                            Name = "Khu Thể Thao ABC",
                            OwnerId = 3,
                            Status = "Active",
                            Type = "Bóng đá"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Sân cầu lông Hồ Kỳ Hòa, 27 Cao Thắng, Quận 3, TP.HCM",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5241), new TimeSpan(0, 7, 0, 0, 0)),
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5263), new TimeSpan(0, 7, 0, 0, 0)),
                            Latitude = 10.768492999999999,
                            Longitude = 106.681771,
                            Name = "Khu Thể Thao DEF",
                            OwnerId = 3,
                            Status = "Active",
                            Type = "Cầu lông"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Sân thể thao Rạch Miễu, 1 Hoa Phượng, Phú Nhuận, TP.HCM",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5555), new TimeSpan(0, 7, 0, 0, 0)),
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5557), new TimeSpan(0, 7, 0, 0, 0)),
                            Latitude = 10.800005000000001,
                            Longitude = 106.683813,
                            Name = "Khu Thể Thao GHI",
                            OwnerId = 3,
                            Status = "Active",
                            Type = "Pickleball"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Sân thể thao Vạn Tường, 59A Nguyễn Du, Quận 1, TP.HCM",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5560), new TimeSpan(0, 7, 0, 0, 0)),
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5561), new TimeSpan(0, 7, 0, 0, 0)),
                            Latitude = 10.77623,
                            Longitude = 106.699208,
                            Name = "Khu Thể Thao JKL",
                            OwnerId = 3,
                            Status = "Active",
                            Type = "Pickleball"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Sân cầu lông Quận 6, 42 Nguyễn Văn Luông, Quận 6, TP.HCM",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5564), new TimeSpan(0, 7, 0, 0, 0)),
                            ImageUrls = "[\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest1.png?alt=media\\u0026token=0c05a2e7-869d-4e0c-98b2-41dd842fe90c\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest2.png?alt=media\\u0026token=cc65bd49-e3df-4a51-b513-c7bb534b63d4\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest3.png?alt=media\\u0026token=e239b164-1d55-437b-889d-19781c61a8b0\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest4.png?alt=media\\u0026token=1a0da7ef-2eb3-48e9-a9de-1e2866fe8752\",\"https://firebasestorage.googleapis.com/v0/b/hairsalonamazing-14369.appspot.com/o/images%2Ftest5.png?alt=media\\u0026token=b2b2f296-f847-4c95-96d3-50ae7fc827a0\"]",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 622, DateTimeKind.Unspecified).AddTicks(5566), new TimeSpan(0, 7, 0, 0, 0)),
                            Latitude = 10.737717,
                            Longitude = 106.62858199999999,
                            Name = "Khu Thể Thao MNO",
                            OwnerId = 3,
                            Status = "Active",
                            Type = "Cầu lông"
                        });
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.UserMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("UserMessages");
                });

            modelBuilder.Entity("TeamUp.Repositories.Entity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Certificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Experience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Height")
                        .HasColumnType("real");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<decimal?>("PricePerSession")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RefreshTokenExpiryTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusForCoach")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetObject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.Property<string>("WorkingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkingDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PackageId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f73ef495-2f6b-4d4a-8a9f-2067489bec19",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 5, 756, DateTimeKind.Unspecified).AddTicks(488), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "admin@teamup.com",
                            EmailConfirmed = true,
                            FullName = "System Admin",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 5, 756, DateTimeKind.Unspecified).AddTicks(490), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TEAMUP.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEC8h59O/XODTAhmSiTXcEYBW+G1eFa8XAI3d8nPAdOsdLq135N+WVBptXal452uDaA==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "19e03d71-ce83-4eef-bf44-71aa21105879",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e13c7dcf-98f4-4006-a99d-c3762b25d61f",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 5, 848, DateTimeKind.Unspecified).AddTicks(1143), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "player@teamup.com",
                            EmailConfirmed = true,
                            FullName = "Người Chơi A",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 5, 848, DateTimeKind.Unspecified).AddTicks(1168), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "PLAYER@TEAMUP.COM",
                            NormalizedUserName = "PLAYER",
                            PasswordHash = "AQAAAAIAAYagAAAAELy915p9P1W2YCVKedLjJpt+UYfbSOn1z0owDkNW8wIA95yzqkUWmvBf1Rrjjrrmeg==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "09983098-cb8a-4127-b9d7-eb394a1c7678",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "player"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a91c88c-5d7c-4d71-8f84-1d4cdea8879f",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 5, 922, DateTimeKind.Unspecified).AddTicks(8589), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "chusan@teamup.com",
                            EmailConfirmed = true,
                            FullName = "Chủ Sân A",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 5, 922, DateTimeKind.Unspecified).AddTicks(8612), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "CHUSAN@TEAMUP.COM",
                            NormalizedUserName = "CHUSAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEEgENhtDdMeeUUWsTqtKBxO5aZoEnC5UJ1ocDtnVUriKh/M6zi7GLr5z4ZSK4TPchg==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "a25164ed-5fde-4c50-a1c3-0e1c688ce0da",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "chusan"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Certificate = "Chứng chỉ A",
                            ConcurrencyStamp = "d4835e79-22e4-4978-8e2d-066b899e642a",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 5, 998, DateTimeKind.Unspecified).AddTicks(8236), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "coach@teamup.com",
                            EmailConfirmed = true,
                            Experience = "5 năm huấn luyện đội trẻ U15",
                            FullName = "HLV B",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 5, 998, DateTimeKind.Unspecified).AddTicks(8259), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH@TEAMUP.COM",
                            NormalizedUserName = "COACH",
                            PasswordHash = "AQAAAAIAAYagAAAAEMDncl0G6pUBOUToXTtz3IAv3wYV3xcTdXifpqMkUa/S2KKMBDLacnrMSggnf/6XlA==",
                            PhoneNumberConfirmed = false,
                            PricePerSession = 5000m,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "1b34423b-e266-47b1-86fa-862981693e19",
                            Specialty = "Bóng đá",
                            Status = 1,
                            StatusForCoach = "Active",
                            TargetObject = "Trẻ em, thanh thiếu niên",
                            TwoFactorEnabled = false,
                            Type = "Bóng đá",
                            UserName = "coach",
                            WorkingAddress = "Sân ABC, Quận 1",
                            WorkingDate = "Thứ 2, 4, 6"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Certificate = "Chứng chỉ B",
                            ConcurrencyStamp = "5dc70265-af96-45ae-a840-65a04685ea99",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 69, DateTimeKind.Unspecified).AddTicks(2731), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "coach1@teamup.com",
                            EmailConfirmed = true,
                            Experience = "5 năm huấn luyện đội trẻ U15",
                            FullName = "HLV 1",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 69, DateTimeKind.Unspecified).AddTicks(2746), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH1@TEAMUP.COM",
                            NormalizedUserName = "COACH1",
                            PasswordHash = "AQAAAAIAAYagAAAAED7fGLaQg1/H1eKHetcBR5mqdIpF6Qu+uYj6umvSfFschQ0t3Wt1wlJxkEko2NPuzw==",
                            PhoneNumberConfirmed = false,
                            PricePerSession = 250000m,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "c710c8e1-e50a-40b9-bea3-901f53b0287e",
                            Specialty = "Bóng đá",
                            Status = 1,
                            StatusForCoach = "Active",
                            TargetObject = "Trẻ em, thanh thiếu niên",
                            TwoFactorEnabled = false,
                            Type = "Bóng đá",
                            UserName = "coach1",
                            WorkingAddress = "Sân XYZ, Quận 5",
                            WorkingDate = "Thứ 3, 5"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Certificate = "Chứng chỉ C",
                            ConcurrencyStamp = "193f9ed7-2e10-4825-a5a6-347dc0ef7221",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 69, DateTimeKind.Unspecified).AddTicks(2845), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "coach2@teamup.com",
                            EmailConfirmed = true,
                            Experience = "3 năm huấn luyện cá nhân và nhóm",
                            FullName = "HLV 2",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 69, DateTimeKind.Unspecified).AddTicks(2846), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH2@TEAMUP.COM",
                            NormalizedUserName = "COACH2",
                            PasswordHash = "AQAAAAIAAYagAAAAEF2ufVaJX+srOyyBEFH5L2xhH11xKXrq3X/j5iGUEiKuEmukLLVMpQ5VINLkblf82A==",
                            PhoneNumberConfirmed = false,
                            PricePerSession = 180000m,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "38d092e8-1bb9-420e-b463-6e6a54299084",
                            Specialty = "Cầu lông",
                            Status = 1,
                            StatusForCoach = "Active",
                            TargetObject = "Người lớn, học sinh",
                            TwoFactorEnabled = false,
                            Type = "Cầu lông",
                            UserName = "coach2",
                            WorkingAddress = "Sân Lông, Quận 2",
                            WorkingDate = "Thứ 2, 4"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Certificate = "Chứng chỉ D",
                            ConcurrencyStamp = "f0ecc7f8-c628-4b9d-bd90-440b8adafc2a",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 69, DateTimeKind.Unspecified).AddTicks(2864), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "coach3@teamup.com",
                            EmailConfirmed = true,
                            Experience = "2 năm giảng dạy cho người mới bắt đầu",
                            FullName = "HLV 3",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 69, DateTimeKind.Unspecified).AddTicks(2865), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH3@TEAMUP.COM",
                            NormalizedUserName = "COACH3",
                            PasswordHash = "AQAAAAIAAYagAAAAEIpe5heIUXay6tm7GFo46dGEkd42drcyb2BOmifE4dLK1Xd0yMuX1fqVqNKOU9LTlg==",
                            PhoneNumberConfirmed = false,
                            PricePerSession = 220000m,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "8312eb70-8c7d-4f22-b136-1c7f3cb6ef68",
                            Specialty = "Pickleball",
                            Status = 1,
                            StatusForCoach = "Active",
                            TargetObject = "Người mới chơi, người cao tuổi",
                            TwoFactorEnabled = false,
                            Type = "Pickleball",
                            UserName = "coach3",
                            WorkingAddress = "Sân PB, Quận 7",
                            WorkingDate = "Thứ 6, 7"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Certificate = "Chứng chỉ A",
                            ConcurrencyStamp = "5d468548-10ae-4768-8695-aaca75bcd7cf",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 69, DateTimeKind.Unspecified).AddTicks(2914), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "coach4@teamup.com",
                            EmailConfirmed = true,
                            Experience = "8 năm làm HLV cho các đội phong trào",
                            FullName = "HLV 4",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 69, DateTimeKind.Unspecified).AddTicks(2915), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH4@TEAMUP.COM",
                            NormalizedUserName = "COACH4",
                            PasswordHash = "AQAAAAIAAYagAAAAEN4WKIR+WDxkxJ2fSu7fo3G7b9qDYJj31z+xUj04NsmwxIJrwbRbT9nHjfgbIm/r/w==",
                            PhoneNumberConfirmed = false,
                            PricePerSession = 230000m,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "677b72b6-789e-48dd-89c9-7e24bea966a5",
                            Specialty = "Bóng đá",
                            Status = 1,
                            StatusForCoach = "Active",
                            TargetObject = "Người lớn, sinh viên",
                            TwoFactorEnabled = false,
                            Type = "Bóng đá",
                            UserName = "coach4",
                            WorkingAddress = "Sân K, Quận 6",
                            WorkingDate = "Thứ 3, 6"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Certificate = "Chứng chỉ B",
                            ConcurrencyStamp = "23bb73b6-2a79-4957-8b10-784bcd1f6232",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 69, DateTimeKind.Unspecified).AddTicks(3072), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "coach5@teamup.com",
                            EmailConfirmed = true,
                            Experience = "4 năm giảng dạy tại trung tâm thể thao",
                            FullName = "HLV 5",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 69, DateTimeKind.Unspecified).AddTicks(3074), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH5@TEAMUP.COM",
                            NormalizedUserName = "COACH5",
                            PasswordHash = "AQAAAAIAAYagAAAAEOIMzIXdvIT+ZTkMk3+GTEDYb/N4jVYRPQ9Oj0kAmDZAYHESGx7CTWyigmEF+kGbFw==",
                            PhoneNumberConfirmed = false,
                            PricePerSession = 190000m,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "8c01bf37-f146-4d8e-817a-2d808855e3f2",
                            Specialty = "Cầu lông",
                            Status = 1,
                            StatusForCoach = "Active",
                            TargetObject = "Thiếu nhi, người đi làm",
                            TwoFactorEnabled = false,
                            Type = "Cầu lông",
                            UserName = "coach5",
                            WorkingAddress = "Sân Mây, Quận 10",
                            WorkingDate = "Thứ 2, 5"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Certificate = "Chứng chỉ E",
                            ConcurrencyStamp = "e9a7bc35-f1cd-42fe-8526-92e54bd28a8e",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 69, DateTimeKind.Unspecified).AddTicks(3082), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "coach6@teamup.com",
                            EmailConfirmed = true,
                            Experience = "1 năm hỗ trợ luyện tập cơ bản và thi đấu",
                            FullName = "HLV 6",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 69, DateTimeKind.Unspecified).AddTicks(3083), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH6@TEAMUP.COM",
                            NormalizedUserName = "COACH6",
                            PasswordHash = "AQAAAAIAAYagAAAAEKYa+MDOZ4I3S091f+BtwQ8RlZy8zjx8/J0bAwJg3IJLVp6a81xOoeUQ9bbSuniWmA==",
                            PhoneNumberConfirmed = false,
                            PricePerSession = 210000m,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "6d1e36eb-5003-410d-9a0f-d7bde8666029",
                            Specialty = "Pickleball",
                            Status = 1,
                            StatusForCoach = "Active",
                            TargetObject = "Người cao tuổi, học viên nữ",
                            TwoFactorEnabled = false,
                            Type = "Pickleball",
                            UserName = "coach6",
                            WorkingAddress = "Sân Pick, Quận 9",
                            WorkingDate = "Thứ 4, 7"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Certificate = "Chứng chỉ C",
                            ConcurrencyStamp = "564f26aa-7ea7-4d45-89af-1e08548520da",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 69, DateTimeKind.Unspecified).AddTicks(3092), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "coach7@teamup.com",
                            EmailConfirmed = true,
                            Experience = "6 năm giảng dạy các lớp nâng cao",
                            FullName = "HLV 7",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 5, 24, 17, 36, 6, 69, DateTimeKind.Unspecified).AddTicks(3093), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH7@TEAMUP.COM",
                            NormalizedUserName = "COACH7",
                            PasswordHash = "AQAAAAIAAYagAAAAEDZHvhqNu0aJzCA2ScQd7yQ6Did4sm1XGl2nlzWjdT5+N1C9h2MuW0VB9t7VMUNVow==",
                            PhoneNumberConfirmed = false,
                            PricePerSession = 240000m,
                            RefreshTokenExpiryTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SecurityStamp = "08213040-6d7f-46c8-9bcb-48d319d8c96f",
                            Specialty = "Bóng đá",
                            Status = 1,
                            StatusForCoach = "Active",
                            TargetObject = "Học viên đã có nền tảng",
                            TwoFactorEnabled = false,
                            Type = "Bóng đá",
                            UserName = "coach7",
                            WorkingAddress = "Sân Gold, Quận Tân Bình",
                            WorkingDate = "Thứ 3, 5, 7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("TeamUp.Contract.Repositories.Entity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.ApplicationUserRole", b =>
                {
                    b.HasOne("TeamUp.Contract.Repositories.Entity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.CoachBooking", b =>
                {
                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "Coach")
                        .WithMany("CoachBookingsAsCoach")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeamUp.Contract.Repositories.Entity.Court", "Court")
                        .WithMany("CoachBookings")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "Player")
                        .WithMany("CoachBookingsAsPlayer")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("Court");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Court", b =>
                {
                    b.HasOne("TeamUp.Contract.Repositories.Entity.SportsComplex", "SportsComplex")
                        .WithMany("Courts")
                        .HasForeignKey("SportsComplexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportsComplex");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.CourtBooking", b =>
                {
                    b.HasOne("TeamUp.Contract.Repositories.Entity.Court", "Court")
                        .WithMany("CourtBookings")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "User")
                        .WithMany("CourtBookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Court");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Payment", b =>
                {
                    b.HasOne("TeamUp.Contract.Repositories.Entity.CoachBooking", "CoachBooking")
                        .WithMany("Payments")
                        .HasForeignKey("CoachBookingId");

                    b.HasOne("TeamUp.Contract.Repositories.Entity.CourtBooking", "CourtBooking")
                        .WithMany("Payments")
                        .HasForeignKey("CourtBookingId");

                    b.HasOne("TeamUp.Contract.Repositories.Entity.Package", "Package")
                        .WithMany("Payments")
                        .HasForeignKey("PackageId");

                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoachBooking");

                    b.Navigation("CourtBooking");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Rating", b =>
                {
                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "Reviewee")
                        .WithMany("RatingsReceived")
                        .HasForeignKey("RevieweeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "Reviewer")
                        .WithMany("RatingsGiven")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reviewee");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Room", b =>
                {
                    b.HasOne("TeamUp.Contract.Repositories.Entity.Court", "Court")
                        .WithMany("Rooms")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "Host")
                        .WithMany("HostedRooms")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Court");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.RoomJoinRequest", b =>
                {
                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "Requester")
                        .WithMany("RoomJoinRequests")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamUp.Contract.Repositories.Entity.Room", "Room")
                        .WithMany("JoinRequests")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requester");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.RoomPlayer", b =>
                {
                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "Player")
                        .WithMany("RoomPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamUp.Contract.Repositories.Entity.Room", "Room")
                        .WithMany("RoomPlayers")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.SportsComplex", b =>
                {
                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "Owner")
                        .WithMany("SportsComplexs")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.UserMessage", b =>
                {
                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "Recipient")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeamUp.Repositories.Entity.ApplicationUser", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TeamUp.Repositories.Entity.ApplicationUser", b =>
                {
                    b.HasOne("TeamUp.Contract.Repositories.Entity.Package", "Package")
                        .WithMany("Users")
                        .HasForeignKey("PackageId");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.CoachBooking", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Court", b =>
                {
                    b.Navigation("CoachBookings");

                    b.Navigation("CourtBookings");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.CourtBooking", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Package", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.Room", b =>
                {
                    b.Navigation("JoinRequests");

                    b.Navigation("RoomPlayers");
                });

            modelBuilder.Entity("TeamUp.Contract.Repositories.Entity.SportsComplex", b =>
                {
                    b.Navigation("Courts");
                });

            modelBuilder.Entity("TeamUp.Repositories.Entity.ApplicationUser", b =>
                {
                    b.Navigation("CoachBookingsAsCoach");

                    b.Navigation("CoachBookingsAsPlayer");

                    b.Navigation("CourtBookings");

                    b.Navigation("HostedRooms");

                    b.Navigation("Payments");

                    b.Navigation("RatingsGiven");

                    b.Navigation("RatingsReceived");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("RoomJoinRequests");

                    b.Navigation("RoomPlayers");

                    b.Navigation("SentMessages");

                    b.Navigation("SportsComplexs");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
